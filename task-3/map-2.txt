//word0
Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array, always with the value 0. For example the string "hello" makes the pair "hello":0. We'll do more complicated counting later, but for this problem the value is simply 0.
word0(["a", "b", "a", "b"]) → {"a": 0, "b": 0}
word0(["a", "b", "a", "c", "b"]) → {"a": 0, "b": 0, "c": 0}
word0(["c", "b", "a"]) → {"a": 0, "b": 0, "c": 0}
public Map<String, Integer> word0(String[] strings) {
  Map<String, Integer> result = new HashMap<>();

        for (String str : strings) {
            
            if (!result.containsKey(str)) {
              
                result.put(str, 0);
            }
        }

        return result;
    } 


//wordLen

Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array, and the value is that string's length.
wordLen(["a", "bb", "a", "bb"]) → {"bb": 2, "a": 1}
wordLen(["this", "and", "that", "and"]) → {"that": 4, "and": 3, "this": 4}
wordLen(["code", "code", "code", "bug"]) → {"code": 4, "bug": 3}

public Map<String, Integer> wordLen(String[] strings) {
     Map<String, Integer> result = new HashMap<>();

        for (String str : strings) {
         
            if (!result.containsKey(str)) {
            
                result.put(str, str.length());
            }
        }

        return result;
    
}
//pairs

Given an array of non-empty strings, create and return a Map<String, String> as follows: for each string add its first character as a key with its last character as the value.
pairs(["code", "bug"]) → {"b": "g", "c": "e"}
pairs(["man", "moon", "main"]) → {"m": "n"}
pairs(["man", "moon", "good", "night"]) → {"g": "d", "m": "n", "n": "t"}
public Map<String, String> pairs(String[] strings) {
   Map<String, String> result = new HashMap<>();

        for (String str : strings) {
            
            String firstChar = String.valueOf(str.charAt(0));
          
            String lastChar = String.valueOf(str.charAt(str.length() - 1));
            
            result.put(firstChar, lastChar);
        }

        return result;
    }
	
	//wordCount
	
The classic word-count algorithm: given an array of strings, return a Map<String, Integer> with a key for each different string, with the value the number of times that string appears in the array.
wordCount(["a", "b", "a", "c", "b"]) → {"a": 2, "b": 2, "c": 1}
wordCount(["c", "b", "a"]) → {"a": 1, "b": 1, "c": 1}
wordCount(["c", "c", "c", "c"]) → {"c": 4}
public Map<String, Integer> wordCount(String[] strings) {
   Map<String, Integer> countMap = new HashMap<>();

       
        for (String str : strings) {
         
            if (countMap.containsKey(str)) {
              
                countMap.put(str, countMap.get(str) + 1);
            } else {
            
                countMap.put(str, 1);
            }
        }

        return countMap;
    
}

//wordAppend

Loop over the given array of strings to build a result string like this: when a string appears the 2nd, 4th, 6th, etc. time in the array, append the string to the result. Return the empty string if no string appears a 2nd time.
wordAppend(["a", "b", "a"]) → "a"
wordAppend(["a", "b", "a", "c", "a", "d", "a"]) → "aa"
wordAppend(["a", "", "a"]) → "a"
public String wordAppend(String[] strings) {
   Map<String, Integer> countMap = new HashMap<>();
        StringBuilder result = new StringBuilder();

        for (String str : strings) {
        
            int count = countMap.getOrDefault(str, 0) + 1;
            countMap.put(str, count);
          
            if (count % 2 == 0) {
                result.append(str);
            }
        }

        return result.toString();
    
}
//wordmultiple
Given an array of strings, return a Map<String, Boolean> where each different string is a key and its value is true if that string appears 2 or more times in the array.


wordMultiple(["a", "b", "a", "c", "b"]) → {"a": true, "b": true, "c": false}
wordMultiple(["c", "b", "a"]) → {"a": false, "b": false, "c": false}
wordMultiple(["c", "c", "c", "c"]) → {"c": true}

public Map<String, Boolean> wordMultiple(String[] strings) {
  Map<String, Integer> countMap = new HashMap<>();
        Map<String, Boolean> resultMap = new HashMap<>();

       
        for (String str : strings) {
          
            int count = countMap.getOrDefault(str, 0) + 1;
            countMap.put(str, count);
            
        
            if (count >= 2) {
                resultMap.put(str, true);
            } else {
                resultMap.put(str, false);
            }
        }

        return resultMap;
    } 
/