//sumdigits

Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).


sumDigits(126) → 9
sumDigits(49) → 13
sumDigits(12) → 3


  public int sumDigits(int n) {
        if (n == 0) {
            return 0;
        
  }
        return n % 10 + sumDigits(n / 10);

}

//count 7
Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).


count7(717) → 2
count7(7) → 1
count7(123) → 0

public int count7(int n) {
   if (n == 0) {
            return 0;
        }
    
        return (n % 10 == 7 ? 1 : 0) + count7(n / 10);
    
}

//powerN
Given base and n that are both 1 or more, compute recursively (no loops) the value of base to the n power, so powerN(3, 2) is 9 (3 squared).


powerN(3, 1) → 3
powerN(3, 2) → 9
powerN(3, 3) → 27

public int powerN(int base, int n) {
   if (n == 0) {
            return 1; 
        } else {
            return base * powerN(base, n - 1); 
}
}

//countX

Given a string, compute recursively (no loops) the number of lowercase 'x' chars in the string.


countX("xxhixx") → 4
countX("xhixhix") → 3
countX("hi") → 0

public int countX(String str) {
    if (str.isEmpty()) {
            return 0; 
            } else if (str.charAt(0) == 'x') {
            return 1 + countX(str.substring(1));
        } else {
            return countX(str.substring(1));
        }
}

//countHi

Given a string, compute recursively (no loops) the number of times lowercase "hi" appears in the string.


countHi("xxhixx") → 1
countHi("xhixhix") → 2
countHi("hi") → 1

public int countHi(String str) {
   if (str.length() < 2) {
            return 0;
        }
        
       
        if (str.substring(0, 2).equals("hi")) {
            return 1 + countHi(str.substring(1));
        }
        
              return countHi(str.substring(1));
}

//changePi

Given a string, compute recursively (no loops) a new string where all appearances of "pi" have been replaced by "3.14".


changePi("xpix") → "x3.14x"
changePi("pipi") → "3.143.14"
changePi("pip") → "3.14p"

public String changePi(String str) {
  if (str.length() < 2) {
            return str;
        }
        
             if (str.substring(0, 2).equals("pi")) {
            return "3.14" + changePi(str.substring(2));
        }
        
       
        return str.charAt(0) + changePi(str.substring(1));
}

//array6

Given an array of ints, compute recursively if the array contains a 6. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.


array6([1, 6, 4], 0) → true
array6([1, 4], 0) → false
array6([6], 0) → true

public boolean array6(int[] nums, int index) {
   if (index >= nums.length) {
            return false;
        }
        
              if (nums[index] == 6) {
            return true;
        }
        
               return array6(nums, index + 1);
}

//allStar


Given a string, compute recursively a new string where all the adjacent chars are now separated by a "*".


allStar("hello") → "h*e*l*l*o"
allStar("abc") → "a*b*c"
allStar("ab") → "a*b"

public String allStar(String str) {
  if (str.length() <= 1) {
            return str;
        }
        
               return str.charAt(0) + "*" + allStar(str.substring(1));
}

//pairStar

Given a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a "*".


pairStar("hello") → "hel*lo"
pairStar("xxyy") → "x*xy*y"
pairStar("aaaa") → "a*a*a*a"

public String pairStar(String str) {
  if (str.length() <= 1) {
            return str;
        }
        
       
        if (str.charAt(0) == str.charAt(1)) {
            return str.charAt(0) + "*" + pairStar(str.substring(1));
        }
        
       
        return str.charAt(0) + pairStar(str.substring(1));
}

//endX
Given a string, compute recursively a new string where all the lowercase 'x' chars have been moved to the end of the string.


endX("xxre") → "rexx"
endX("xxhixx") → "hixxxx"
endX("xhixhix") → "hihixxx"

public String endX(String str) {
   if (str.isEmpty()) {
            return "";
        }
        
       
        if (str.charAt(0) == 'x') {
            return endX(str.substring(1)) + "x";
        }
        
              return str.charAt(0) + endX(str.substring(1));
}

//countpairs
We'll say that a "pair" in a string is two instances of a char separated by a char. So "AxA" the A's make a pair. Pair's can overlap, so "AxAxA" contains 3 pairs -- 2 for A and 1 for x. Recursively compute the number of pairs in the given string.


countPairs("axa") → 1
countPairs("axax") → 2
countPairs("axbx") → 1

public int countPairs(String str) {
   if (str.length() < 3) {
            return 0;
        }
        
      
        if (str.charAt(0) == str.charAt(2)) {
            return 1 + countPairs(str.substring(1));
        }
        
        
        return countPairs(str.substring(1));
    }
//strCopies
Given a string and a non-empty substring sub, compute recursively if at least n copies of sub appear in the string somewhere, possibly with overlapping. N will be non-negative.


strCopies("catcowcat", "cat", 2) → true
strCopies("catcowcat", "cow", 2) → false
strCopies("catcowcat", "cow", 1) → true
public boolean strCopies(String str, String sub, int n) {
  if(str.length()<sub.length() && n>0){
    return false;
  }
  
  if(n<=0){
    return true;
  }
  
  if(str.substring(0,sub.length()).equals(sub)){
    return strCopies(str.substring(1),sub,n-1);
  }
  
  return strCopies(str.substring(1),sub,n);
}


//strDist
Given a string and a non-empty substring sub, compute recursively the largest substring which starts and ends with sub and return its length.


strDist("catcowcat", "cat") → 9
strDist("catcowcat", "cow") → 3
strDist("cccatcowcatxx", "cat") → 9
public int strDist(String str, String sub) {
  if(str.length()<sub.length()){
    return 0;
  }
  
  if(!str.substring(0,sub.length()).equals(sub)){
    return strDist(str.substring(1),sub);
  }
  
  if(!str.substring(str.length()-sub.length()).equals(sub)){
    return strDist(str.substring(0,str.length()-1),sub);
  }
  
  return str.length();
}

//stringClean
Given a string, return recursively a "cleaned" string where adjacent chars that are the same have been reduced to a single char. So "yyzzza" yields "yza".


stringClean("yyzzza") → "yza"
stringClean("abbbcdd") → "abcd"
stringClean("Hello") → "Helo"


public String stringClean(String str) {
  if(str.length()==1){
    return str;
  }
  
  char first=str.charAt(0);
  char second=str.charAt(1);
  
  if(first==second){//skip the first character
    return stringClean(str.substring(1));
  }
  
  return first+stringClean(str.substring(1));
}