//countEvens

Return the number of even ints in the given array. Note: the % "mod" operator computes the remainder, e.g. 5 % 2 is 1.
countEvens([2, 1, 2, 3, 4]) → 3
countEvens([2, 2, 0]) → 3
countEvens([1, 3, 5]) → 0
public int countEvens(int[] nums) {
  int count = 0;
        

        for (int num : nums) {
        
            if (num % 2 == 0) {
              
                count++;
            }
        }
        
        return count;
    }

//bigdiff
Given an array length 1 or more of ints, return the difference between the largest and smallest values in the array. Note: the built-in Math.min(v1, v2) and Math.max(v1, v2) methods return the smaller or larger of two values.


bigDiff([10, 3, 5, 6]) → 7
bigDiff([7, 2, 10, 9]) → 8
bigDiff([2, 10, 7, 2]) → 8

public int bigDiff(int[] nums) {
   
        int smallest = nums[0];
        int largest = nums[0];
        for (int num : nums) {
            smallest = Math.min(smallest, num);
            largest = Math.max(largest, num);
        }
        return largest - smallest;
}

//sum13

Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky, so it does not count and numbers that come immediately after a 13 also do not count.


sum13([1, 2, 2, 1]) → 6
sum13([1, 1]) → 2
sum13([1, 2, 2, 1, 13]) → 6

public int sum13(int[] nums) {
   int sum = 0;
        
        for (int i = 0; i< nums.length; i++) {
            if (nums[i] == 13) {
                i++;
            } 
            else {
                sum += nums[i];
            }
        }
        
        return sum;
}

//sum67

Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.


sum67([1, 2, 2]) → 5
sum67([1, 2, 2, 6, 99, 99, 7]) → 5
sum67([1, 1, 6, 7, 2]) → 4

public int sum67(int[] nums) {
  int sum=0;
    boolean ignore = false;
        for (int num : nums) {
            if (num == 6) {
                ignore = true;
            } else if (num == 7 && ignore){
                ignore = false;
            } else if (!ignore) {
                sum += num;
            }
        }
        
        return sum;
}

//has22

Given an array of ints, return true if the array contains a 2 next to a 2 somewhere.


has22([1, 2, 2]) → true
has22([1, 2, 1, 2]) → false
has22([2, 1, 2]) → false

public boolean has22(int[] nums) {
   for (int i = 1; i< nums.length; i++) {
            if (nums[i] == 2 && nums[i - 1] == 2) {
             return true;   
}
}
return false;
}

//
Given an array of ints, return true if the array contains no 1's and no 3's.


lucky13([0, 2, 4]) → true
lucky13([1, 2, 3]) → false
lucky13([1, 2, 4]) → false

public boolean lucky13(int[] nums) {
 for (int num : nums) {
            // Check if the current element is 1 or 3
            if (num == 1 || num == 3) {
                return false; // Return false if 1 or 3 is found
            }
 }
        return true; // Return true if no 1 or 3 is found
    }


Given an array of ints, return true if the sum of all the 2's in the array is exactly 8.


sum28([2, 3, 2, 2, 4, 2]) → true
sum28([2, 3, 2, 2, 4, 2, 2]) → false
sum28([1, 2, 3, 4]) → false

public boolean sum28(int[] nums) {
  int sumOfTwos =0;
    for (int num : nums) {
      if (num == 2) {
        sumOfTwos += num;
      }
    }
    return sumOfTwos == 8;
  }
  
  
Given an array of ints, return true if the number of 1's is greater than the number of 4's


more14([1, 4, 1]) → true
more14([1, 4, 1, 4]) → false
more14([1, 1]) → true

public boolean more14(int[] nums) {
   int count1 = 0;
        int count4 = 0;
        for (int num : nums) {
            if (num == 1) {
                count1++;
            } else if (num == 4) {
                count4++;
            }
        }
        
        return count1 >count4;
    }

//fizzArray


Given a number n, create and return a new int array of length n, containing the numbers 0, 1, 2, ... n-1. The given n may be 0, in which case just return a length 0 array. You do not need a separate if-statement for the length-0 case; the for-loop should naturally execute 0 times in that case, so it just works. The syntax to make a new int array is: new int[desired_length]   (See also: FizzBuzz Code)


fizzArray(4) → [0, 1, 2, 3]
fizzArray(1) → [0]
fizzArray(10) → [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

public int[] fizzArray(int n) {
   int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            result[i] = i;
        }
        return result;
}

//only14
Given an array of ints, return true if every element is a 1 or a 4.


only14([1, 4, 1, 4]) → true
only14([1, 4, 2, 4]) → false
only14([1, 1]) → true

public boolean only14(int[] nums) {
   for (int num : nums) {
            if (num != 1 && num != 4) {
                return false;
            }
        }
        return true;
}


//fizzarray2


Given a number n, create and return a new string array of length n, containing the strings "0", "1" "2" .. through n-1. N may be 0, in which case just return a length 0 array. Note: String.valueOf(xxx) will make the String form of most types. The syntax to make a new string array is: new String[desired_length]  (See also: FizzBuzz Code)


fizzArray2(4) → ["0", "1", "2", "3"]
fizzArray2(10) → ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
fizzArray2(2) → ["0", "1"]

public String[] fizzArray2(int n) {
   String[] result = new String[n];
        for (int i = 0; i < n; i++) {
            result[i] = String.valueOf(i);
        }
        return result;
        
}

//no14


Given an array of ints, return true if it contains no 1's or it contains no 4's.


no14([1, 2, 3]) → true
no14([1, 2, 3, 4]) → false
no14([2, 3, 4]) → true

public boolean no14(int[] nums) {
   boolean hasOne = false;
        boolean hasFour = false;
        for (int num : nums) {
            if (num == 1) {
                hasOne = true;
            } else if (num == 4) {
                hasFour = true;
            }
        }
        return !hasOne || !hasFour;
    
}

//has77


Given an array of ints, return true if the array contains two 7's next to each other, or there are two 7's separated by one element, such as with {7, 1, 7}.


has77([1, 7, 7]) → true
has77([1, 7, 1, 7]) → true
has77([1, 7, 1, 1, 7]) → false

public boolean has77(int[] nums) {
  for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == 7 && (nums[i + 1] == 7 || (i + 2 < nums.length && nums[i + 2] == 7))) {
                return true;
            }
        }
        return false;
}


//has12


Given an array of ints, return true if there is a 1 in the array with a 2 somewhere later in the array.


has12([1, 3, 2]) → true
has12([3, 1, 2]) → true
has12([3, 1, 4, 5, 2]) → true

public boolean has12(int[] nums) {
   boolean found1 = false;
        for (int num : nums) {
            if (num == 1) {
                found1 = true;
            }
            if (found1 && num == 2) {
                return true;
            }
        }
        return false;
}

//twoTwo
Given an array of ints, return true if every 2 that appears in the array is next to another 2.


twoTwo([4, 2, 2, 3]) → true
twoTwo([2, 2, 4]) → true
twoTwo([2, 2, 4, 2]) → false

public boolean twoTwo(int[] nums) {
  for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 2) {
                if ((i > 0 && nums[i - 1] == 2) || (i < nums.length - 1 && nums[i + 1] == 2)) {
                    
                    continue;
                } else {
                    
                    return false;
                }
            }
        }
        return true;
}

//shiftLeft

Return an array that is "left shifted" by one -- so {6, 2, 5, 3} returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.


shiftLeft([6, 2, 5, 3]) → [2, 5, 3, 6]
shiftLeft([1, 2]) → [2, 1]
shiftLeft([1]) → [1]

public int[] shiftLeft(int[] nums) {
   if (nums.length <= 1) {
            return nums;
        }
        
        int first = nums[0];
        for (int i = 1; i < nums.length; i++) {
            nums[i - 1] = nums[i];
        }
        nums[nums.length - 1] = first;
        
        return nums;
    
}
//pre4
Given a non-empty array of ints, return a new array containing the elements from the original array that come before the first 4 in the original array. The original array will contain at least one 4. Note that it is valid in java to create an array of length 0.


pre4([1, 2, 4, 1]) → [1, 2]
pre4([3, 1, 4]) → [3, 1]
pre4([1, 4, 4]) → [1]

public int[] pre4(int[] nums) {
     int index = 0;
        while (nums[index] != 4) {
            index++;
        }
        return Arrays.copyOf(nums, index);
}
//post4


Given a non-empty array of ints, return a new array containing the elements from the original array that come after the last 4 in the original array. The original array will contain at least one 4. Note that it is valid in java to create an array of length 0.


post4([2, 4, 1, 2]) → [1, 2]
post4([4, 1, 4, 2]) → [2]
post4([4, 4, 1, 2, 3]) → [1, 2, 3]

public int[] post4(int[] nums) {
   int index = nums.length - 1;
        while (nums[index] != 4) {
            index--;
        }
        return Arrays.copyOfRange(nums, index + 1, nums.length);
    
}
//zerFront
Return an array that contains the exact same numbers as the given array, but rearranged so that all the zeros are grouped at the start of the array. The order of the non-zero numbers does not matter. So {1, 0, 0, 1} becomes {0 ,0, 1, 1}. You may modify and return the given array or make a new array.


zeroFront([1, 0, 0, 1]) → [0, 0, 1, 1]
zeroFront([0, 1, 1, 0, 1]) → [0, 0, 1, 1, 1]
zeroFront([1, 0]) → [0, 1]

public int[] zeroFront(int[] nums) {
  int count = 0;

      
        for (int num : nums) {
            if (num == 0) {
                count++;
            }
        }

        for (int i = 0; i < count; i++) {
            nums[i] = 0;
        }

       
        for (int i = count; i < nums.length; i++) {
            nums[i] = 1;
        }

        return nums;
    }
	