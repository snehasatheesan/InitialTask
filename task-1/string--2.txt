//doubleChar

Given a string, return a string where for every char in the original, there are two chars.
doubleChar("The") → "TThhee"
doubleChar("AAbb") → "AAAAbbbb"
doubleChar("Hi-There") → "HHii--TThheerree"
public String doubleChar(String str) {
  StringBuilder result = new StringBuilder();

        for (int i = 0; i <str.length(); i++) {
            char c = str.charAt(i); 
            result.append(c).append(c); 
        }
        return result.toString();
    }

//countHi

Return the number of times that the string "hi" appears anywhere in the given string.
countHi("abc hi ho") → 1
countHi("ABChi hi") → 2
countHi("hihi") → 2
public int countHi(String str) {
  int count = 0;
        
     
        for (int i = 0; i < str.length() - 1; i++) {
   
            if (str.substring(i, i + 2).equals("hi")) {
                count++;
            }
        }

        return count;
  
}

//catDog

Return true if the string "cat" and "dog" appear the same number of times in the given string.
catDog("catdog") → true
catDog("catcat") → false
catDog("1cat1cadodog") → true

public boolean catDog(String str) {
   int catCount = 0;
        int dogCount = 0;
        for (int i = 0; i < str.length() - 2; i++) {
            if (str.substring(i, i + 3).equals("cat")) {
                catCount++;
            }
            if (str.substring(i, i + 3).equals("dog")) {
                dogCount++;
            }
        }

        return catCount == dogCount;
    
}
//countCode

Return the number of times that the string "code" appears anywhere in the given string, except we'll accept any letter for the 'd', so "cope" and "cooe" count.
countCode("aaacodebbb") → 1
countCode("codexxcode") → 2
countCode("cozexxcope") → 2
public int countCode(String str) {
  int count = 0;
        for (int i = 0; i <str.length() - 3; i++) {
            if (str.charAt(i) == 'c' && str.charAt(i + 1) == 'o'&& str.charAt(i + 3) == 'e') {
                count++;
            }
        }

        return count;
}
//bobThere

Return true if the given string contains a "bob" string, but where the middle 'o' char can be any char.
bobThere("abcbob") → true
bobThere("b9b") → true
bobThere("bac") → false
public boolean bobThere(String str) {
        for (int i = 0; i < str.length() - 2; i++) {
            if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
                return true;
            }
        }
   
        return false;
}

//xyBalance

We'll say that a String is xy-balanced if for all the 'x' chars in the string, there exists a 'y' char somewhere later in the string. So "xxy" is balanced, but "xyx" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.


xyBalance("aaxbby") → true
xyBalance("aaxbb") → false
xyBalance("yaaxbb") → false
public boolean xyBalance(String str) {
   int lastIndex = -1; 
        for (int i = 0; i< str.length(); i++) {
            char currentChar = str.charAt(i);

            if (currentChar == 'x') {
               
                lastIndex = str.indexOf('y', i);
            }
        }

        return lastIndex != -1;
    }
	
	//
Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.
repeatEnd("Hello", 3) → "llollollo"
repeatEnd("Hello", 2) → "lolo"
repeatEnd("Hello", 1) → "o"
public String repeatEnd(String str, int n) {

        StringBuilder result = new StringBuilder();
        String lastChars = str.substring(str.length() - n);

        for (int i = 0; i< n; i++) {
            result.append(lastChars);
        }

        return result.toString();
    
}
//repeatFront

Given a string and an int n, return a string made of the first n characters of the string, followed by the first n-1 characters of the string, and so on. You may assume that n is between 0 and the length of the string, inclusive (i.e. n >= 0 and n <= str.length()).
repeatFront("Chocolate", 4) → "ChocChoChC"
repeatFront("Chocolate", 3) → "ChoChC"
repeatFront("Ice Cream", 2) → "IcI"
public String repeatFront(String str, int n) {
   StringBuilder result = new StringBuilder();
        for (int i = n; i >0; i--) {
           
            result.append(str.substring(0, i));
        }

        return result.toString();
  
}
//repeatSeparator
Given two strings, word and a separator sep, return a big string made of count occurrences of the word, separated by the separator string.
repeatSeparator("Word", "X", 3) → "WordXWordXWord"
repeatSeparator("This", "And", 2) → "ThisAndThis"
repeatSeparator("This", "And", 1) → "This"

public String repeatSeparator(String word, String sep, int count) {
  StringBuilder result = new StringBuilder();
        for (int i = 0; i < count; i++) {
            result.append(word);
            if (i < count - 1) {
                result.append(sep);
            }
        }

        return result.toString();
    }
	
	//prefixAgain
	
Given a string, consider the prefix string made of the first N chars of the string. Does that prefix string appear somewhere else in the string? Assume that the string is not empty and that N is in the range 1..str.length().
prefixAgain("abXYabc", 1) → true
prefixAgain("abXYabc", 2) → true
prefixAgain("abXYabc", 3) → false

public boolean prefixAgain(String str, int n) {
  String prefix = str.substring(0, n);
        for (int i = n; i <= str.length() - n; i++) {
            if (str.substring(i, i + n).equals(prefix)) {
                return true;
            }
        }
        
        return false;
    
}

//sameStarChar

Returns true if for every '*' (star) in the string, if there are chars both immediately before and after the star, they are the same.
sameStarChar("xy*yzz") → true
sameStarChar("xy*zzz") → false
sameStarChar("*xa*az") → true

public boolean sameStarChar(String str) {
    int length = str.length();
        for (int i = 1; i < length - 1; i++) {
            if (str.charAt(i) == '*') {
                if (str.charAt(i - 1) != str.charAt(i + 1)) {
                    return false;
                }
            }
        }

        return true;
}

//xyzThere
Return true if the given string contains an appearance of "xyz" where the xyz is not directly preceeded by a period (.). So "xxyz" counts but "x.xyz" does not.
xyzThere("abcxyz") → true
xyzThere("abc.xyz") → false
xyzThere("xyz.abc") → true

public boolean xyzThere(String str) {
   for (int i = 0; i < str.length() - 2; i++) {
            if (str.charAt(i) != '.' && str.substring(i, i + 3).equals("xyz")) {
                if (i == 0 || str.charAt(i - 1) != '.') {
                    return true;
                }
            }
        }
        return false;
}

Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). Note: str.toLowerCase() returns the lowercase version of a string.
endOther("Hiabc", "abc") → true
endOther("AbC", "HiaBc") → true
endOther("abc", "abXabc") → true

public boolean endOther(String a, String b) {
  String lowerA = a.toLowerCase();
        String lowerB = b.toLowerCase();
      
        return lowerA.endsWith(lowerB) || lowerB.endsWith(lowerA);
}

//getSandwich
A sandwich is two pieces of bread with something in between. Return the string that is between the first and last appearance of "bread" in the given string, or return the empty string "" if there are not two pieces of bread.


getSandwich("breadjambread") → "jam"
getSandwich("xxbreadjambreadyy") → "jam"
getSandwich("xxbreadyy") → "

public String getSandwich(String str) {
  int firstBread = str.indexOf("bread");
        int lastBread = str.lastIndexOf("bread");
        
        if (firstBread != -1 && lastBread != -1 && firstBread < lastBread) {
            return str.substring(firstBread + 5, lastBread);
        } else {
            return "";
}
}
