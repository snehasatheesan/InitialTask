//fix45

(This is a slightly harder version of the fix34 problem.) Return an array that contains exactly the same numbers as the given array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array.
fix45([5, 4, 9, 4, 9, 5]) → [9, 4, 5, 4, 5, 9]
fix45([1, 4, 1, 5]) → [1, 4, 5, 1]
fix45([1, 4, 1, 5, 5, 4, 1]) → [1, 4, 5, 1, 1, 4, 5]
public int[] fix45(int[] nums) {
   int[] result = new int[nums.length];
    List<Integer> fivesIndex = new ArrayList<>();
    int index = 0;
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 5) {
            fivesIndex.add(index);
        } else {
            result[index++] = nums[i];
        }
    }
    
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 4) {
            result[index++] = 4;
            result[index++] = 5;
        }
    }
    
    for (int i = 0; i < fivesIndex.size(); i++) {
        result[index++] = 5;
    }
    
    return result;
}

//fix34

Return an array that contains exactly the same numbers as the given array, but rearranged so that every 3 is immediately followed by a 4. Do not move the 3's, but every other number may move. The array contains the same number of 3's and 4's, every 3 has a number after it that is not a 3, and a 3 appears in the array before any 4.
fix34([1, 3, 1, 4]) → [1, 3, 4, 1]
fix34([1, 3, 1, 4, 4, 3, 1]) → [1, 3, 4, 1, 1, 3, 4]
fix34([3, 2, 2, 4]) → [3, 4, 2, 2]

public int[] fix34(int[] nums) {
  int[] result = new int[nums.length];
    List<Integer> foursIndex = new ArrayList<>();
    int index = 0;
  
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 4) {
            foursIndex.add(index + 1);
        } else if (nums[i] != 3) {
            result[index++] = nums[i];
        }
    }
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 3) {
            result[index++] = nums[i];
            result[index++] = 4;
        }
    }
    
    return result;
}

//canBalance

Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.
canBalance([1, 1, 1, 2, 1]) → true
canBalance([2, 1, 1, 2, 1]) → false
canBalance([10, 10]) → true
public boolean canBalance(int[] nums) {
  int totalSum = 0;
    int leftSum = 0;
    
       for (int num : nums) {
        totalSum += num;
    }
    
  for (int i = 0; i < nums.length; i++) {
        leftSum += nums[i];
        
    if (leftSum == totalSum - leftSum) {
            return true;
        }
    }
    
    return false;
}

//linearIn

Given two arrays of ints sorted in increasing order, outer and inner, return true if all of the numbers in inner appear in outer. The best solution makes only a single "linear" pass of both arrays, taking advantage of the fact that both arrays are already in sorted order.


linearIn([1, 2, 4, 6], [2, 4]) → true
linearIn([1, 2, 4, 6], [2, 3, 4]) → false
linearIn([1, 2, 4, 4, 6], [2, 4]) → true

public boolean linearIn(int[] outer, int[] inner) {
   int outerIndex = 0;
    int innerIndex = 0;
    while (outerIndex < outer.length && innerIndex < inner.length) {
        
        if (outer[outerIndex] == inner[innerIndex]) {
            innerIndex++;
        }
        outerIndex++; 
    }
    
    return innerIndex == inner.length;
}
//squareup
Given n>=0, create an array length n*n with the following pattern, shown here for n=3 : {0, 0, 1,    0, 2, 1,    3, 2, 1} (spaces added to show the 3 groups).


squareUp(3) → [0, 0, 1, 0, 2, 1, 3, 2, 1]
squareUp(2) → [0, 1, 2, 1]
squareUp(4) → [0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1
public int[] squareUp(int n) {
   int[] result = new int[n * n];
    
    for (int i = 1; i <= n; i++) {
          for (int j = 1; j <= i; j++) {
            result[i * n - j] = j;
        }
    }
    
    return result;


}
//countClumps
Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.
countClumps([1, 2, 2, 3, 4, 4]) → 2
countClumps([1, 1, 2, 1, 1]) → 2
countClumps([1, 1, 1, 1, 1]) → 1
 int clumps = 0;
    boolean inClump = false;

    for (int i = 1; i < nums.length; i++) {
        if (nums[i] == nums[i - 1]) {
            if (!inClump) {
                clumps++;
                inClump = true;
            }
        } else {
            inClump = false;
        }
    

    return clumps;
}